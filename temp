Node<value_type,size_type> *  deleteNode(Node<value_type,size_type> *  root, value_type v) 
        {
            // base case 
            if (root == nullptr) 
                return nullptr;

            // If the key to be deleted is smaller than the root's key, 
            // then it lies in left subtree 
            
            else if (v < root-> data) 
                root-> left = deleteNode(root-> left, v);
            
            // If the data to be deleted is greater than the root's data, 
            // then it lies in right subtree 
            
            else if (v > root-> data) 
                root-> right = deleteNode(root-> right, v);
            
            // if data is same as root's data, then This is the node to be deleted 
            
            else 
            {
            // node with only one child or no child 
                if (root-> left == nullptr) 
                {
                    Node<value_type,size_type> *  temp = root-> right;
                    alloc.deallocate(root,sizeof(root));
                    return temp;
                } 
                else if (root-> right == nullptr) 
                {
                    Node<value_type,size_type> *  temp = root-> left;
                    alloc.deallocate(root,sizeof(root));
                    return temp;
                } 
                else 
                {
                    // node with two children: Get the inorder successor (smallest 
                    // in the right subtree) 
                    Node<value_type,size_type> *  temp = minValue(root-> right);
                    // Copy the inorder successor's content to this node 
                    root  = temp ;
                    // Delete the inorder successor 
                    root-> right = deleteNode(root-> right, temp -> data);
                    //deleteNode(r->right, temp->value); 
                }
            }

            int bf = getBalance(root);
            // Left Left Imbalance/Case or Right rotation 
            if (bf == 2 && getBalance(root-> left) >= 0)
                return rightRotate(root);
            // Left Right Imbalance/Case or LR rotation 
            else if (bf == 2 && getBalance(root-> left) == -1) 
            {
                root-> left = leftRotate(root-> left);
                return rightRotate(root);
            }
            // Right Right Imbalance/Case or Left rotation	
            else if (bf == -2 && getBalance(root-> right) <= -0)
                return leftRotate(root);
            // Right Left Imbalance/Case or RL rotation 
            else if (bf == -2 && getBalance(root-> right) == 1) 
            {
                root-> right = rightRotate(root-> right);
                return leftRotate(root);
            }

            return root;
        }